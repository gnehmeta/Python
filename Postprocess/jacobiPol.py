#****************************************************************************************
# Modules                                                                               *
#****************************************************************************************
import numpy as np
#****************************************************************************************



#****************************************************************************************
# Definition                                                                            *
#****************************************************************************************
def jacobiP(x = None,a = None,b = None,N = None): 
    if N == 0:
        p = 1
        return p
    if N == 1:
        p = (1 / 2) * (a - b + (2 + a + b) * x)
        return p
    apb = a + b
    apb_amb = (a + b) * (a - b)
    pm2 = 1
    pm1 = (1 / 2) * (a - b + (2 + a + b) * x)
    for n in np.arange(2,N+1).reshape(-1):
        A = 2 * n + apb
        B = n * (n + apb) * (A - 2)
        p = np.multiply(((A - 1) * (apb_amb + x * (A - 2) * A) / (2 * B)),pm1) - np.multiply(((n + a - 1) * (n + b - 1) * A / B),pm2)
        pm2 = pm1
        pm1 = p    
    return p
#****************************************************************************************    