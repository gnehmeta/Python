#****************************************************************************************
# Modules                                                                               *
#****************************************************************************************
import numpy as np
#****************************************************************************************



#****************************************************************************************
# Definition 1                                                                          *
#****************************************************************************************    
def QuadratureTri(order = None): 
    t1 = np.array([1,0])
    t2 = np.array([- 1 / 2,np.sqrt(3) / 2])
    t3 = np.array([- 1 / 2,- np.sqrt(3) / 2])
    XeTri = np.array([[t1],[t2],[t3]])
    # Elements du groupe D3
    fi1 = 2 * np.pi / 3
    fi2 = 4 * np.pi / 3
    A = np.matrix([[np.cos(fi1),np.sin(fi1)],[- np.sin(fi1),np.cos(fi1)]])
    B = np.matrix([[np.cos(fi2),np.sin(fi2)],[- np.sin(fi2),np.cos(fi2)]])
    C = np.matrix([[1,0],[0,1]])
    D = np.matrix([[np.cos(fi1),- np.sin(fi1)],[- np.sin(fi1),- np.cos(fi1)]])
    E = np.matrix([[1,0],[0,- 1]])
    F = np.matrix([[np.cos(fi2),- np.sin(fi2)],[- np.sin(fi2),- np.cos(fi2)]])
    if order == 5:
        M = np.array([1,3,3])
        X = np.array([0,- 0.4104261923153453,0.696140478029631])
        Y = np.array([0,0,0])
        w = np.array([0.225,0.13239415278850622,0.12593918054482714])
    else:
        if order == 10:
            M = np.array([1,3,3,3,3,6,6])
            X = np.array([0,- 0.49359629886342454,- 0.2840373491871686,0.44573076177032633,0.9385563442849673,- 0.447495515154092,- 0.443676394612336])
            Y = np.array([0,0,0,0,0,- 0.5991595522781586,- 0.257178132939213])
            w = np.array([0.08352339980519638,0.007229850592056743,0.0744921779209805,0.07864647340310853,0.006928323087107504,0.0295183203347794,0.03957936719606124])
        else:
            if order == 15:
                M = np.array([3,3,3,3,3,3,6,6,6,6,6,6])
                X = np.array([- 0.3748423891073751,- 0.2108313937373917,0.12040849626092393,0.5605966391716812,0.8309113970031897,0.950274619424889,- 0.4851316950361628,- 0.476294344054658,- 0.492284586774544,- 0.4266165113705168,- 0.3968468770512212,- 0.2473933728129512])
                Y = np.array([0,0,0,0,0,0,- 0.4425551659467111,- 0.1510682717598242,- 0.6970224211436132,- 0.5642774363966393,- 0.3095105740458471,- 0.2320292030461791])
                w = np.array([0.03266181884880529,0.027412818031364364,0.0265100365987033,0.02921596213648611,0.01058460806624399,0.003614643064092035,0.008527748101709436,0.01391617651669193,0.004291932940734835,0.01623532928177489,0.02560734092126239,0.03308819553164567])
            else:
                if order == 20:
                    M = np.array([1,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,6])
                    X = np.array([0,- 0.4977490260133565,- 0.3587903720915737,- 0.19329181386571043,0.20649939240163803,0.3669431077237697,0.676793178486186,0.882792736486592,0.9664768608120111,- 0.4919755727189941,- 0.4880677744007016,- 0.4843664025781043,- 0.483553377805815,- 0.4421499318718065,- 0.4466292382741727,- 0.4254937754558538,- 0.4122204123735024,- 0.3177533194934086,- 0.2889337325840919])
                    Y = np.array([0,0,0,0,0,0,0,0,0,- 0.7513212483763635,- 0.5870191642967427,- 0.17172709841143283,- 0.3833898305784408,- 0.656328197446107,- 0.06157647932662624,- 0.47831240826600274,- 0.2537089901614676,- 0.3996183176834929,- 0.18441839672339824])
                    w = np.array([0.02761042699769952,0.00177902954732674,0.02011239811396117,0.02681784725933157,0.02452313380150201,0.01639457841069539,0.0147959073986496,0.004579282277704251,0.001651826515576217,0.002349170908575584,0.004465925754181793,0.006099566807907972,0.006891081327188203,0.007997475072478163,0.007386134285336025,0.01279933187864826,0.01725807117569655,0.01867294590293547,0.02281822405839526])
                else:
                    if order == 25:
                        M = np.array([3,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6])
                        X = np.array([- 0.4580802753902387,- 0.3032320980085228,- 0.1696674057318916,0.1046702979405866,0.2978674829878846,0.5455949961729473,0.661798319362019,0.7668529237254211,0.895320719157109,0.9782254461372029,- 0.4980614709433367,- 0.4919004480918257,- 0.4904239954490375,- 0.4924576827470104,- 0.4897598620673272,- 0.4849757005401057,- 0.461363280239915,- 0.4546581528201263,- 0.4542425148392569,- 0.431065178956146,- 0.3988357991895837,- 0.3949323628761341,- 0.3741327130398251,- 0.319436696484271,- 0.27789965126395,- 0.2123422011990124])
                        Y = np.array([0,0,0,0,0,0,0,0,0,0,- 0.4713592181681879,- 0.1078887424748246,- 0.3057041948876942,- 0.7027546250883238,- 0.7942765584469995,- 0.5846826436376921,- 0.4282174042835178,- 0.212943406065343,- 0.6948910659636692,- 0.5691146659505208,- 0.3161666335733065,- 0.1005941839340892,- 0.4571406037889341,- 0.2003599744104858,- 0.3406754571040736,- 0.1359589640107579])
                        w = np.array([0.008005581880020417,0.0159470768323905,0.01310914123079553,0.019583000965635623,0.01647088544153727,0.0085472790740921,0.008161885857226492,0.006121146539983779,0.002908498264936665,0.0006922752456619963,0.001248289199277397,0.003404752908803022,0.003359654326064051,0.001716156539496754,0.001480856316715606,0.003511312610728685,0.007393550149706484,0.007983087477376558,0.004355962613158041,0.007365056701417832,0.01096357284641955,0.01174996174354112,0.01001560071379857,0.01330964078762868,0.01415444650522614,0.01488137956116801])
                    else:
                        if order == 30:
                            M = np.array([1,3,3,3,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6])
                            X = np.array([0,- 0.489004825350852,- 0.375506486295553,- 0.273528565811884,- 0.14614121016175,0.157036462611772,0.317953072437897,0.476322665473811,0.63022471839569,0.759747313323409,0.856676597776304,0.934838455959575,0.985705967153689,- 0.49861194320998,- 0.497921111216654,- 0.494476376816134,- 0.494145164863761,- 0.495150127767484,- 0.490298851831645,- 0.495128786763001,- 0.486987363789869,- 0.476604460299029,- 0.473034918119472,- 0.474313631969166,- 0.465674891980127,- 0.45089360406835,- 0.449268481486489,- 0.446678578309977,- 0.4241903145397,- 0.414477927626402,- 0.403770790368195,- 0.379248277568562,- 0.343449397798204,- 0.329232658356873,- 0.281954768426714,- 0.215081520767032])
                            Y = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,- 0.145911499458133,- 0.758841124126978,- 0.577206108525577,- 0.819283113385993,- 0.333106124712369,- 0.674968075724015,- 0.464914848460198,- 0.274747981868076,- 0.755078734433048,- 0.153390877058151,- 0.429173048901523,- 0.559744628102069,- 0.665677920960733,- 0.302435402004506,- 0.037339333379264,- 0.443257445349149,- 0.159839002260082,- 0.562852040975635,- 0.304872368029416,- 0.434881627890658,- 0.151014758677329,- 0.290117766854826,- 0.143940337075373])
                            w = np.array([0.015579960202899,0.003177233700534,0.010483426635731,0.013209459577744,0.014975006966272,0.014987904443384,0.013338864741022,0.010889171113902,0.008189440660893,0.005575387588608,0.003191216473412,0.001296715144327,0.000298262826135,0.000998905685079,0.000462850849173,0.001234451336382,0.000570719852243,0.001126946125878,0.001747866949407,0.001182818815032,0.001990839294675,0.001900412795036,0.004498365808817,0.003478719460275,0.004102399036724,0.004021761549744,0.006033164660795,0.00394629030213,0.00664404453768,0.008254305856078,0.006496056633406,0.009252778144147,0.009164920726294,0.011569524628098,0.011761116467609,0.013824702182165])
                        else:
                            print('Quadrature non dÃ©finie')
    
    m = len(M)
    pospg = []
    pespg = []
    z = 1
    for i in range(m):
        x = X[i] 
        y = Y[i] 
        Mat1 = np.matrix([[x],[y]])
        Mat2 = np.transpose(C @ Mat1) 
        liste= [] 
        for l in range(Mat2.shape[0]):
           for k in range(Mat2.shape[1]):
                liste.append(Mat2[l,k])       
        pospg.append(liste)        
        if M[i]  > 1:
            Mat3 = np.transpose(A @ Mat1)
            Mat4 = np.transpose(B @ Mat1)
            liste= [] 
            for l in range(Mat3.shape[0]):
                for k in range(Mat3.shape[1]):
                    liste.append(Mat3[l,k])       
            pospg.append(liste)  
            liste= [] 
            for l in range(Mat4.shape[0]):
                for k in range(Mat4.shape[1]):
                    liste.append(Mat4[l,k])       
            pospg.append(liste) 
        if M[i] > 3:
            Mat5 = np.transpose(D @ Mat1)
            Mat6 = np.transpose(E @ Mat1)
            Mat7 = np.transpose(F @ Mat1)
            liste= [] 
            for l in range(Mat5.shape[0]):
                for k in range(Mat5.shape[1]):
                    liste.append(Mat5[l,k])       
            pospg.append(liste)  
            liste= [] 
            for l in range(Mat6.shape[0]):
                for k in range(Mat6.shape[1]):
                    liste.append(Mat6[l,k])       
            pospg.append(liste)
            liste= [] 
            for l in range(Mat7.shape[0]):
                for k in range(Mat7.shape[1]):
                    liste.append(Mat7[l,k])       
            pospg.append(liste) 
        for j in range(M[i]):
            pespg.append(w[i] * np.sqrt(27) / 4)
    return pospg,pespg,XeTri
#****************************************************************************************            


#****************************************************************************************
# Definition 2                                                                          *
#**************************************************************************************** 
def GaussLegendreCubature2D(order = None): 
    if order == 1:
        gPts = 1
    else:
        if order == 2:
            gPts = 3
        else:
            if order == 3:
                gPts = 4
            else:
                if order == 4:
                    gPts = 6
                else:
                    if order == 5:
                        gPts = 7
                    else:
                        if order == 6:
                            gPts = 12
                        else:
                            if order == 7:
                                gPts = 13
                            else:
                                if order == 8:
                                    gPts = 16
                                else:
                                    if order == 10:
                                        gPts = 25
                                    else:
                                        if order == 15:
                                            gPts = 54
                                        else:
                                            if order == 20:
                                                gPts = 85
                                            else:
                                                if order == 25:
                                                    gPts = 126
                                                else:
                                                    if order == 30:
                                                        gPts = 175
    
    xi = np.zeros((gPts,2))
    w_g = np.zeros((gPts,1))
    if gPts == 1:
        xi[1,np.arange[1,2+1]] = np.array([1 / 3,1 / 3])
        w_g = 1
    else:
        if gPts == 3:
            xi[1,:] = np.array([2 / 3,1 / 6])
            xi[2,:] = np.array([1 / 6,2 / 3])
            xi[3,:] = np.array([1 / 6,1 / 6])
            w_g = np.array([1 / 3,1 / 3,1 / 3])
        else:
            if gPts == 4:
                xi[1,1] = 1.0 / 3.0
                xi[1,2] = 1.0 / 3.0
                xi[2,1] = 0.6
                xi[2,2] = 0.2
                xi[3,1] = 0.2
                xi[3,2] = 0.6
                xi[4,1] = 0.2
                xi[4,2] = 0.2
                w_g[1] = - 27.0 / 48.0
                w_g[2] = 25.0 / 48.0
                w_g[3] = 25.0 / 48.0
                w_g[4] = 25.0 / 48.0
            else:
                if gPts == 6:
                    a = 0.659027622374092
                    b = 0.231933368553031
                    c = 0.109039009072877
                    xi[1,:] = np.array([a,b])
                    xi[2,:] = np.array([b,a])
                    xi[3,:] = np.array([a,c])
                    xi[4,:] = np.array([c,a])
                    xi[5,:] = np.array([b,c])
                    xi[6,:] = np.array([c,b])
                    w_g = np.array([1 / 6,1 / 6,1 / 6,1 / 6,1 / 6,1 / 6])
                else:
                    if gPts == 12:
                        a = 0.873821971016996
                        b = 0.063089014491502
                        xi[1,:] = np.array([a,b])
                        xi[2,:] = np.array([b,b])
                        xi[3,:] = np.array([b,a])
                        a = 0.501426509658179
                        b = 0.24928674517091
                        xi[4,:] = np.array([a,b])
                        xi[5,:] = np.array([b,b])
                        xi[6,:] = np.array([b,a])
                        a = 0.636502499121399
                        b = 0.310352451033785
                        c = 0.053145049844816
                        xi[7,:] = np.array([a,b])
                        xi[8,:] = np.array([b,a])
                        xi[9,:] = np.array([a,c])
                        xi[10,:] = np.array([c,a])
                        xi[11,:] = np.array([b,c])
                        xi[12,:] = np.array([c,b])
                        w_g = np.array([0.050844906370207,0.050844906370207,0.050844906370207,0.116786275726379,0.116786275726379,0.116786275726379,0.082851075618374,0.082851075618374,0.082851075618374,0.082851075618374,0.082851075618374,0.082851075618374])
                    else:
                        if gPts == 7:
                            pospg,pespg = QuadratureTri(order)
                            if (gPts != pospg.shape[1-1]):
                                print('error integration')
                            F = np.array([[2 / 3,0],[- 1 / 3,1 / np.sqrt(3)]])
                            u = np.transpose(np.array([1 / 3,1 / 3]))
                            pospg = pospg * np.transpose(F)
                            for i in np.arange(1,gPts+1).reshape(-1):
                                pospg[i,:] = pospg[i,:]  + np.transpose(u)
                            pespg = pespg / sum(pespg)
                            xi = pospg
                            w_g = pespg
                        else:
                            if gPts == 25:
                                pospg,pespg = QuadratureTri(order)
                                if (gPts != pospg.shape[1-1]):
                                    print('error integration')
                                F = np.array([[2 / 3,0],[- 1 / 3,1 / np.sqrt(3)]])
                                u = np.array([1 / 3,1 / 3])
                                pospg = pospg * np.transpose(F)
                                for i in np.arange(1,gPts+1).reshape(-1):
                                    pospg[i,:] = pospg[i,:] + u
                                pespg = pespg / sum(pespg)
                                xi = pospg
                                w_g = pespg
                            else:
                                if gPts == 54:
                                    pospg,pespg,XeTri = QuadratureTri(order)
                                    pospg = np.matrix(pospg)
                                    if (gPts != len(pospg)):
                                        print('error integration')
                                    F = np.array([[2 / 3,0],[- 1 / 3,1 / np.sqrt(3)]])
                                    F = np.matrix(F)
                                    u = np.array([1 / 3,1 / 3])
                                    pospg = pospg @ np.transpose(F)
                                    for i in range(gPts):
                                        pospg[i,:] = pospg[i,:]  + u
                                    pespg = pespg / sum(pespg)
                                    xi = pospg
                                    w_g = pespg
                                else:
                                    if gPts == 85:
                                        pospg,pespg = QuadratureTri(order)
                                        if (gPts != pospg.shape[1-1]):
                                            print('error integration')
                                        F = np.array([[2 / 3,0],[- 1 / 3,1 / np.sqrt(3)]])
                                        u = np.array([1 / 3,1 / 3])
                                        pospg = pospg * np.transpose(F)
                                        for i in np.arange(1,gPts+1).reshape(-1):
                                            pospg[i,:] = pospg[i,:]  + u
                                        pespg = pespg / sum(pespg)
                                        xi = pospg
                                        w_g = pespg
                                    else:
                                        if gPts == 126:
                                            pospg,pespg = QuadratureTri(order)
                                            if (gPts != pospg.shape[1-1]):
                                                print('error integration')
                                            F = np.array([[2 / 3,0],[- 1 / 3,1 / np.sqrt(3)]])
                                            u = np.array([1 / 3,1 / 3])
                                            pospg = pospg * np.transpose(F)
                                            for i in np.arange(1,gPts+1).reshape(-1):
                                                pospg[i,:] = pospg[i,:]  + u
                                            pespg = pespg / sum(pespg)
                                            xi = pospg
                                            w_g = pespg
                                        else:
                                            if gPts == 175:
                                                pospg,pespg = QuadratureTri(order)
                                                if (gPts != pospg.shape[1-1]):
                                                    print('error integration')
                                                F = np.array([[2 / 3,0],[- 1 / 3,1 / np.sqrt(3)]])
                                                u = np.transpose(np.array([1 / 3,1 / 3]))
                                                pospg = pospg * np.transpose(F)
                                                for i in np.arange(1,gPts+1).reshape(-1):
                                                    pospg[i,:] = pospg[i,:]  + np.transpose(u)
                                                pespg = pespg / sum(pespg)
                                                xi = pospg
                                                w_g = pespg
                                            else:
                                                raise Exception('Nonavailable triangle cubature')
    return xi,w_g
#************************************************************************************
